name: CI and CD

on:
  push:
    branches: [main]

jobs:
  test-build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [backend, frontend]
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python / Node
        uses: actions/setup-python@v5
        if: matrix.service == 'backend'
        with:
          python-version: "3.11"
      - uses: actions/setup-node@v4
        if: matrix.service == 'frontend'
        with:
          node-version: "20"
      - name: Install deps & run tests
        run: |
          cd ${{ matrix.service }}
          if [[ "${{ matrix.service }}" == "backend" ]]; then
            pip install -r requirements.txt
            pytest -q
          else
            npm ci
            npm run test --if-present
          fi

  docker-publish:
    needs: test-build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - name: backend
            path: backend
            image: geoportal-backend
          - name: frontend
            path: frontend
            image: geoportal-frontend
    steps:
      - uses: actions/checkout@v4
      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build & Push
        uses: docker/build-push-action@v5
        with:
          context: ${{ matrix.path }}
          push: true
          tags: ghcr.io/${{ github.repository_owner }}/${{ matrix.image }}:latest

  deploy:
    needs: docker-publish
    runs-on: ubuntu-latest
    environment: production
    steps:
      - uses: actions/checkout@v4
      - name: Set up kubectl
        uses: azure/setup-kubectl@v4
        with:
          version: v1.30.0
      - name: Load KUBECONFIG
        run: echo "${{ secrets.KUBECONFIG }}" | base64 -d > $HOME/.kube/config
      - name: Apply manifests
        run: |
          kubectl apply -f k8s/postgres.yaml
          kubectl apply -f k8s/backend.yaml
          kubectl apply -f k8s/frontend.yaml
          kubectl apply -f k8s/ingress.yaml
